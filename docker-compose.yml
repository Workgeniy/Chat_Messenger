services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 10

  api:
    build:
      context: .
      dockerfile: Server/Dockerfile
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection}
      Jwt__Key: ${Jwt__Key}
      Jwt__Audience: ${Jwt__Audience}
      Jwt__Issuer: ${Jwt__Issuer}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - avatars:/app/wwwroot/avatars
    expose:
      - "8080"

  # Одноразовая сборка фронта -> складываем /dist в том web_dist
  web-build:
    build:
      context: ./WebClient
      dockerfile: Dockerfile
      target: builder            # важное: берём build-стейдж
      args:
        VITE_API_BASE: ${VITE_API_BASE}   # обычно /api
        VITE_HUB_URL: ${VITE_HUB_URL}     # обычно /chatHub
    volumes:
      - web_dist:/out
    command: sh -lc 'rm -rf /out/* && cp -a /app/dist/. /out/'
    restart: "no"

  # Выделенный nginx (reverse-proxy + раздача статики)
  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - api
      - web-build
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-www:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
      - avatars:/var/www/avatars:ro
      - web_dist:/usr/share/nginx/html:ro

  certbot:
    image: certbot/certbot:latest
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: sh
    command: -c 'sleep 5; certbot certonly --webroot -w /var/www/certbot -d ${DOMAIN} -d www.${DOMAIN} --email ${EMAIL} --agree-tos --no-eff-email --rsa-key-size 4096 --non-interactive && crond -f'

volumes:
  letsencrypt:
  certbot-www:
  pgdata:
  avatars:
  web_dist:
