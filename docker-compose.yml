
services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 10

  api:
    build:
      context: .
      dockerfile: Server/Dockerfile
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection}
      Jwt__Key: ${Jwt__Key}
      Jwt__Audience: ${Jwt__Audience}
      Jwt__Issuer: ${Jwt__Issuer}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - avatars:/app/wwwroot/avatars   # чтобы не терять загруженные аватарки

  web:
    build:
      context: ./WebClient
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE}
        VITE_HUB_URL: ${VITE_HUB_URL}
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"     # HTTP
      # - "443:443" # HTTPS — если добавишь сертификаты внутрь контейнера
    volumes:
      - avatars:/usr/share/nginx/html/avatars:ro # чтобы nginx отдавал аватарки тоже

volumes:
  pgdata:
  avatars:
